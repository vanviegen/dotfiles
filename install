#!/usr/bin/env ruby
require 'fileutils'
require 'pathname'

# Get into script directory
Dir.chdir(File.dirname(__FILE__))
pwd = Dir.pwd + '/'
home = ENV["HOME"]

# Set the shell

zsh = `cat /etc/shells | grep /zsh | tail -n 1`.strip
if ENV["SHELL"] != zsh
	`chsh -s #{zsh}`
end

# Compile custom terminfo
`tic xterm-screen-256color.terminfo`

# Install vim plugins
system("/usr/bin/vim -c ':PlugInstall' -c ':q!' -c ':q!'")

# Create symlinks
linkables = Dir.glob('*/**{.symlink}')

skip_all = false
overwrite_all = false
backup_all = false

targets = {}

linkables.each do |linkable|
	overwrite = false
	backup = false

	target = '.' + linkable.split('/').last.split('.symlink').last.gsub(/__/,'/')
	target = home + '/' + target
	targets[target] = true
	linkable = Pathname.new(pwd+linkable).realpath.to_s

	if File.exists?(target) || File.symlink?(target)
		next if File.symlink?(target) and File.readlink(target)==linkable
		unless skip_all || overwrite_all || backup_all
			puts "File already exists: #{target}, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all"
			case STDIN.gets.chomp
			when 'o' then overwrite = true
			when 'b' then backup = true
			when 'O' then overwrite_all = true
			when 'B' then backup_all = true
			when 'S' then skip_all = true
			when 's' then next
			end
		end
		FileUtils.rm_rf(target) if overwrite || overwrite_all
		`mv "#{target}" "#{target}.backup"` if backup || backup_all
	else
		FileUtils.mkdir_p(File.dirname(target))
	end
	
	print "linking #{target}\n"
	`ln -s "#{linkable}" "#{target}"`
end

(Dir["#{home}/.*"] + Dir["#{home}/.*/**"]).each do |file|
	if File.lstat(file).symlink?
		link = File.readlink(file)
		if link.start_with?(pwd) and not targets[file]
			print "unlinking #{file}\n"
			File.unlink(file)
		end
	end
end

