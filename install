#!/usr/bin/env bash

# Change working directory to script directory
cd "$(dirname "$0")"
if [ "$(pwd)" != "$HOME/.dotfiles" ] ; then
	echo "Cowardly refusing to proceed as the install script is not running from $HOME/.dotfiles."
	exit 1
fi

declare -A targets

if [ "$1" != "--uninstall" ] ; then

	# Install packages, if needed
	if command -v pacman &> /dev/null ; then
		 # Arch/Manjaro
		packages="sudo git fish curl xz fzf ripgrep tmux broot helix"
		if ! pacman -Q $packages &>/dev/null; then
			sudo pacman -S --needed $packages
		fi
	else
		# Debian/Ubuntu
		packages="sudo apt install -y sudo git curl xz-utils fzf ripgrep tmux broot"
		if ! dpkg-query -Wf'${db:Status-abbrev}\n' $packages 2>/dev/null | grep -q "^i"; then
			sudo apt install $packages
		fi

		# Install Nix, if needed
		if ! command -v nix-env &> /dev/null; then
			curl -sL https://nixos.org/nix/install | sh -s -- --daemon
		fi
		source /etc/profile.d/nix.sh

		# Install some Nix packages that are not available/up-to-date on Debian/Ubuntu
		nix-channel --update && nix-env -iA nixpkgs.nix && nix-env -f '<nixpkgs>' -iA fzf broot helix fish
	fi

	# Set the ssh-git URL for this repo, to allow pushing changes
	git remote set-url --push origin git@github.com:vanviegen/dotfiles.git

	# Copy the fish universal variables file from the repo
	cp -f fish/config__fish.symlink/fish_variables.template fish/config__fish.symlink/fish_variables

	# Create symlinks
	linkables=(*/**.symlink)
	skip_all=false
	overwrite_all=false
	backup_all=false

	for linkable in "${linkables[@]}"; do
		overwrite=false
		backup=false

		target=".$(basename "${linkable%.symlink}" | sed 's/__/\//g')"
		target="$HOME/$target"
		targets["$target"]=true
		linkable="$(realpath "$(pwd)/$linkable")"

		if [ -e "$target" ] || [ -L "$target" ]; then
			if [ -L "$target" ] && [ "$(readlink "$target")" = "$linkable" ]; then
				continue
			fi
			if ! "$skip_all" && ! "$overwrite_all" && ! "$backup_all"; then
				read -p "File already exists: $target, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all >> " choice
				case "$choice" in
					o) overwrite=true;;
					b) backup=true;;
					O) overwrite_all=true;;
					B) backup_all=true;;
					S) skip_all=true;;
					s) continue;;
				esac
			fi
			if "$overwrite" || "$overwrite_all"; then
				rm -rf "$target"
			fi
			if "$backup" || "$backup_all"; then
				mv "$target" "$target.backup"
			fi
		else
			mkdir -p "$(dirname "$target")"
		fi

		echo "linking $target"
		ln -s "$linkable" "$target"
	done
fi

for file in "$HOME/".* "$HOME/".*/**; do
	if [ -L "$file" ]; then
		link="$(readlink "$file")"
		if [[ "$link" == "$(pwd)/"* ]] && [ ! "${targets[$file]}" ]; then
			echo "unlinking $file"
			rm "$file"
		fi
	fi
done

