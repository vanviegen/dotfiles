#!/usr/bin/env bash

# Change working directory to script directory
cd "$(dirname "$0")"
if [ "$(pwd)" != "$HOME/.dotfiles" ] ; then
	echo "Cowardly refusing to proceed as the install script is not running from $HOME/.dotfiles."
	exit 1
fi

declare -A targets

if [ "$1" != "--uninstall" ] ; then

	# Install packages, if needed
	if command -v pacman &> /dev/null ; then
		 # Arch/Manjaro
		packages="sudo git zsh curl xz ripgrep tmux broot helix wl-clipboard xsel fzf"
		if ! pacman -Q $packages &>/dev/null; then
			sudo pacman -S --needed $packages
		fi
	elif command -v apt &> /dev/null ; then
		# Debian/Ubuntu
		packages="git curl xz-utils ripgrep zsh wl-clipboard xsel tmux fuse fzf"
		if dpkg-query -Wf'${db:Status-abbrev}\n' $packages 2>&1 | grep -vq "^ii"  ; then
			sudo apt install $packages
		fi

		if [ ! -e "xbin/broot" ] ; then
			wget -nv "https://dystroy.org/broot/download/x86_64-unknown-linux-musl/broot" -O "xbin/broot" && chmod a+x "xbin/broot"
		fi
		
		if [ ! -e "xbin/hx" ] ; then
			wget "https://github.com/zydou/helix/releases/download/v24.03/helix-v24.03-x86_64-unknown-linux-gnu.tar.xz" -O - | tar xvJ --directory=xbin --strip-components=1
			chmod a+x bin/hx
		fi
	elif command -v nix-env &> /dev/null ; then
		nix-env -f '<nixpkgs>' -iA tmux broot helix fzf ripgrep xz helix zsh curl xsel python3
	elif command -v dnf &> /dev/null ; then
		for package in git zsh curl xz ripgrep tmux helix xsel fzf ; do
			if ! dnf list installed "$package" &>/dev/null; then
				sudo dnf install -y "$package"
			fi
		done
	else
		# Bluefin? OSX?
		for a in git zsh curl xz ripgrep:rg tmux broot helix:hx xsel fzf; do
		    cmd="${a##*:}"
		    pkg="${a%%:*}"
		    command -v "$cmd" > /dev/null || echo "$pkg"
		done | HOMEBREW_NO_ENV_HINTS=1 xargs -r brew install
  fi

	# Set the ssh-git URL for this repo, to allow pushing changes
	git remote set-url --push origin git@github.com:vanviegen/dotfiles.git

	# Create symlinks
	linkables=(*/**.symlink)
	skip_all=false
	overwrite_all=false
	backup_all=false

	for linkable in "${linkables[@]}"; do
		overwrite=false
		backup=false

		target=".$(basename "${linkable%.symlink}" | sed 's/__/\//g')"
		target="$HOME/$target"
		targets["$target"]=true
		linkable="$(realpath "$(pwd)/$linkable")"

		if [ -e "$target" ] || [ -L "$target" ]; then
			if [ -L "$target" ] && [ "$(readlink "$target")" = "$linkable" ]; then
				continue
			fi
			if ! "$skip_all" && ! "$overwrite_all" && ! "$backup_all"; then
				read -p "File already exists: $target, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all >> " choice
				case "$choice" in
					o) overwrite=true;;
					b) backup=true;;
					O) overwrite_all=true;;
					B) backup_all=true;;
					S) skip_all=true;;
					s) continue;;
				esac
			fi
			if "$overwrite" || "$overwrite_all"; then
				rm -rf "$target"
			fi
			if "$backup" || "$backup_all"; then
				mv "$target" "$target.backup"
			fi
		else
			mkdir -p "$(dirname "$target")"
		fi

		echo "linking $target"
		ln -s "$linkable" "$target"
	done

	chmod -R a+rX .
	chmod a+x,o-r ..
fi

for file in "$HOME/".* "$HOME/".*/**; do
	if [ -L "$file" ]; then
		link="$(readlink "$file")"
		if [[ "$link" == "$(pwd)/"* ]] && [ ! "${targets[$file]}" ]; then
			echo "unlinking $file"
			rm "$file"
		fi
	fi
done

