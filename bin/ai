#!/bin/env python
import subprocess
import sys
import os
import re

# Create a virtual environment in the user's cache directory
cache_dir = os.path.join(os.path.expanduser('~'), '.cache', 'chatgpython')
os.makedirs(cache_dir, exist_ok=True)
sys.path.append(cache_dir)

# Load openai library, installing it first if required
try:
    from openai import OpenAI
except ImportError:
    print("Installing openai library...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--cache-dir", cache_dir, "--target", cache_dir, "openai"])
    from openai import OpenAI

# Load pyperclip library, installing it first if required
try:
    import pyperclip
except ImportError:
    print("Installing pyperclip library...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--cache-dir", cache_dir, "--target", cache_dir, "pyperclip"])
    import pyperclip

# Configure openAI
openai = OpenAI(api_key=os.environ["OPENAI_KEY"])

# Get a prompt from the user
prompt = " ".join(sys.argv[1:]) if len(sys.argv) > 1 else input("Prompt? ")
if not prompt:
    exit()

# Add stdin data to the prompt
if not sys.stdin.isatty():
    data = sys.stdin.read()
    prompt += f"\n\n```{data.rstrip()}\n```"

# Get a response from openAI
response = openai.chat.completions.create(
    model="gpt-4-turbo-preview",
    messages=[
        {"role": "system", "content": "You are a command-line virtual assistant. The user can ask you question about any topic, to which you will provide a short but precise answer. If the user ask you to write code, make sure to put the output in a code block with the proper language marker. When the user asks to perform an action that it something one would do in the command shell, propose a `zsh` code block. Don't repeat the question in your reply. Don't summarize at the end of your reply. Just a code block is fine, if nothing more needs to be said."},
        {"role": "user", "content": prompt}
    ],
)
text = response.choices[0].message.content

# Highlight any code block and copy it to the clipboard
def found_code_block(m):
    pyperclip.copy(m.group(2))
    return f"```{m.group(1)}\n\033[92m{m.group(2)}\033[0m\n```"
text = re.sub(r"^```(.*)\n([\w\W]*)\n```", found_code_block, text)

# Show result
print(text)
