#!/usr/bin/env python3

import argparse
import subprocess
import os

parser = argparse.ArgumentParser(description='Show disk usage for the top directories/files.')
parser.add_argument('-n', '--number', type=int, default=20, help='Number of items to show')
parser.add_argument('-c', '--computer', action='store_true', help='Computer-readable output')
parser.add_argument('-x', '--one-file-system', action='store_true', help='Skip directories on different file systems')
parser.add_argument('-a', '--apparent-size', action='store_true', help='Print apparent sizes, rather than disk usage')
parser.add_argument('-A', '--aggregate', action='store_true', help='Show aggregate sizes')
parser.add_argument('dirs', nargs='*', default=['.'], help='Directories to analyze')
args = parser.parse_args()

du_command = ['du', '-B', '1', '-a']
if args.apparent_size:
    du_command.append('--apparent-size')
if args.one_file_system:
    du_command.append('-x')
du_command.extend(args.dirs)

process = subprocess.Popen(du_command, stdout=subprocess.PIPE, universal_newlines=True)
items = []
for line in process.stdout:
    size, path = line.strip().split('\t', 1)
    items.append((int(size), path))
process.wait()

items.sort()
result = {}
for size, path in reversed(items):
    if len(result) > args.number and size < sorted(result.values(), key=lambda x: x[0])[-args.number-1][0]:
        break
    result[path] = [size, size]

    path_parts = path.split(os.sep)
    while path_parts:
        path_parts.pop()
        parent = os.sep.join(path_parts)
        if parent in result or parent + os.sep in result:
            result[parent][0] -= size
            break

result = sorted(result.items(), key=lambda x: x[1][0])
result = result[max(0, len(result) - args.number):]

if args.aggregate:
    result = sorted((path, total) for path, (_, total) in result)
else:
    result = sorted((path, current) for path, (current, _) in result)

if args.computer:
    for path, size in result:
        print(f"{size} {path}")
else:
    mult = 1
    unit = ''
    min_size = min(size for _path, size in result)
    for next_unit in "KMGT":
        if min_size * mult < 1024 * 0.7:
            break
        mult /= 1024
        unit = next_unit

    max_size = max(size for _path, size in result)
    max_size_width = len(str(round(max_size * mult)))
    for path, size in result:
        formatted_size = str(round(size * mult)).rjust(max_size_width)
        print(f"{formatted_size}{unit}  {path}")
